import streamlit as st
import pandas as pd
import numpy as np
import requests
import ta
import plotly.graph_objects as go
from datetime import datetime, timedelta

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Crypto Technical Analysis", layout="wide")
st.title("Ph√¢n t√≠ch K·ªπ thu·∫≠t Th·ªã tr∆∞·ªùng Crypto")

# H√†m l·∫•y d·ªØ li·ªáu t·ª´ OKX API
def get_okx_data(symbol, interval, limit=100):
    base_url = "https://www.okx.com"
    endpoint = f"/api/v5/market/candles"
    url = f"{base_url}{endpoint}?instId={symbol}&bar={interval}&limit={limit}"
    
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()['data']
        df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'volCcy', 'volCcyQuote', 'confirm'])
        
        # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        df['timestamp'] = pd.to_datetime(df['timestamp'].astype(float), unit='ms')
        return df.sort_values('timestamp')
    return None

# H√†m t√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
def calculate_indicators(df):
    # RSI
    df['RSI'] = ta.momentum.RSIIndicator(df['close']).rsi()
    
    # MACD
    macd = ta.trend.MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    
    # Bollinger Bands
    bollinger = ta.volatility.BollingerBands(df['close'])
    df['BB_High'] = bollinger.bollinger_hband()
    df['BB_Low'] = bollinger.bollinger_lband()
    df['BB_Mid'] = bollinger.bollinger_mavg()
    
    # Stochastic Oscillator
    stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'])
    df['Stoch_K'] = stoch.stoch()
    df['Stoch_D'] = stoch.stoch_signal()
    
    return df

# H√†m ph√¢n t√≠ch xu h∆∞·ªõng v√† ƒë∆∞a ra khuy·∫øn ngh·ªã
def analyze_trend(df):
    last_close = df['close'].iloc[-1]
    rsi = df['RSI'].iloc[-1]
    stoch_k = df['Stoch_K'].iloc[-1]
    stoch_d = df['Stoch_D'].iloc[-1]
    macd = df['MACD'].iloc[-1]
    macd_signal = df['MACD_Signal'].iloc[-1]
    bb_high = df['BB_High'].iloc[-1]
    bb_low = df['BB_Low'].iloc[-1]
    
    signals = []
    
    # Ph√¢n t√≠ch RSI
    if rsi > 70:
        signals.append("RSI cho th·∫•y v√πng qu√° mua")
    elif rsi < 30:
        signals.append("RSI cho th·∫•y v√πng qu√° b√°n")
        
    # Ph√¢n t√≠ch Stochastic
    if stoch_k > 80 and stoch_d > 80:
        signals.append("Stochastic cho th·∫•y v√πng qu√° mua")
    elif stoch_k < 20 and stoch_d < 20:
        signals.append("Stochastic cho th·∫•y v√πng qu√° b√°n")
        
    # Ph√¢n t√≠ch MACD
    if macd > macd_signal:
        signals.append("MACD cho t√≠n hi·ªáu t√≠ch c·ª±c")
    else:
        signals.append("MACD cho t√≠n hi·ªáu ti√™u c·ª±c")
        
    # Ph√¢n t√≠ch Bollinger Bands
    if last_close > bb_high:
        signals.append("Gi√° ƒëang ·ªü v√πng qu√° mua theo Bollinger Bands")
    elif last_close < bb_low:
        signals.append("Gi√° ƒëang ·ªü v√πng qu√° b√°n theo Bollinger Bands")
        
    # X√°c ƒë·ªãnh xu h∆∞·ªõng t·ªïng th·ªÉ
    bullish_signals = len([s for s in signals if "qu√° b√°n" in s or "t√≠ch c·ª±c" in s])
    bearish_signals = len([s for s in signals if "qu√° mua" in s or "ti√™u c·ª±c" in s])
    
    if bullish_signals > bearish_signals:
        trend = "TƒÇNG üìà"
    elif bearish_signals > bullish_signals:
        trend = "GI·∫¢M üìâ"
    else:
        trend = "ƒêANG T√çCH L≈®Y ‚ÜîÔ∏è"
        
    return trend, signals

# Sidebar cho c·∫•u h√¨nh
st.sidebar.header("C·∫•u h√¨nh")

# Danh s√°ch c√°c c·∫∑p giao d·ªãch ph·ªï bi·∫øn
trading_pairs = [
    "PI-USDT", "BTC-USDT", "ETH-USDT", "BNB-USDT", "XRP-USDT", "SOL-USDT",
    "ADA-USDT", "AVAX-USDT", "MATIC-USDT", "LINK-USDT", "DOT-USDT"
]

# Widget ch·ªçn c·∫∑p giao d·ªãch
selected_pair = st.sidebar.selectbox(
    "Ch·ªçn c·∫∑p giao d·ªãch",
    trading_pairs
)

# Widget ch·ªçn khung th·ªùi gian
timeframes = {
    "1 ph√∫t": "1m",
    "5 ph√∫t": "5m",
    "15 ph√∫t": "15m",
    "30 ph√∫t": "30m",
    "1 gi·ªù": "1H",
    "4 gi·ªù": "4H",
    "1 ng√†y": "1D"
}

selected_timeframe = st.sidebar.selectbox(
    "Ch·ªçn khung th·ªùi gian",
    list(timeframes.keys())
)

# L·∫•y v√† x·ª≠ l√Ω d·ªØ li·ªáu
df = get_okx_data(selected_pair, timeframes[selected_timeframe])

if df is not None:
    df = calculate_indicators(df)
    trend, signals = analyze_trend(df)
    
    # Hi·ªÉn th·ªã xu h∆∞·ªõng v√† t√≠n hi·ªáu
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Xu h∆∞·ªõng hi·ªán t·∫°i")
        st.markdown(f"## {trend}")
        
    with col2:
        st.subheader("C√°c t√≠n hi·ªáu k·ªπ thu·∫≠t")
        for signal in signals:
            st.write(f"‚Ä¢ {signal}")
            
    # V·∫Ω bi·ªÉu ƒë·ªì gi√° v√† c√°c ch·ªâ b√°o
    fig = go.Figure()
    
    # Th√™m n·∫øn
    fig.add_trace(go.Candlestick(
        x=df['timestamp'],
        open=df['open'],
        high=df['high'],
        low=df['low'],
        close=df['close'],
        name='Gi√°'
    ))
    
    # Th√™m Bollinger Bands
    fig.add_trace(go.Scatter(
        x=df['timestamp'],
        y=df['BB_High'],
        name='BB Upper',
        line=dict(color='gray', dash='dash')
    ))
    
    fig.add_trace(go.Scatter(
        x=df['timestamp'],
        y=df['BB_Low'],
        name='BB Lower',
        line=dict(color='gray', dash='dash'),
        fill='tonexty'
    ))
    
    fig.update_layout(
        title=f'Bi·ªÉu ƒë·ªì gi√° {selected_pair}',
        yaxis_title='Gi√°',
        xaxis_title='Th·ªùi gian',
        height=600
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # V·∫Ω c√°c ch·ªâ b√°o ph·ª•
    col1, col2 = st.columns(2)
    
    with col1:
        # RSI
        fig_rsi = go.Figure()
        fig_rsi.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['RSI'],
            name='RSI'
        ))
        fig_rsi.add_hline(y=70, line_dash="dash", line_color="red")
        fig_rsi.add_hline(y=30, line_dash="dash", line_color="green")
        fig_rsi.update_layout(title='RSI', height=300)
        st.plotly_chart(fig_rsi, use_container_width=True)
        
    with col2:
        # Stochastic
        fig_stoch = go.Figure()
        fig_stoch.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['Stoch_K'],
            name='Stoch %K'
        ))
        fig_stoch.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['Stoch_D'],
            name='Stoch %D'
        ))
        fig_stoch.add_hline(y=80, line_dash="dash", line_color="red")
        fig_stoch.add_hline(y=20, line_dash="dash", line_color="green")
        fig_stoch.update_layout(title='Stochastic Oscillator', height=300)
        st.plotly_chart(fig_stoch, use_container_width=True)
    
    # MACD
    fig_macd = go.Figure()
    fig_macd.add_trace(go.Scatter(
        x=df['timestamp'],
        y=df['MACD'],
        name='MACD'
    ))
    fig_macd.add_trace(go.Scatter(
        x=df['timestamp'],
        y=df['MACD_Signal'],
        name='Signal'
    ))
    fig_macd.update_layout(title='MACD', height=300)
    st.plotly_chart(fig_macd, use_container_width=True)
    
else:
    st.error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ OKX API. Vui l√≤ng th·ª≠ l·∫°i sau.")